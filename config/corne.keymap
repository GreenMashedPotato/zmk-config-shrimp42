/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <10 9>;
        };
    };

    macros {
        screen_left: screen_left {
            compatible = "zmk,behavior-macro";
            label = "screen_left";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LCTRL>;
        };
        screen_right: screen_right {
            compatible = "zmk,behavior-macro";
            label = "screen_right";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LCTRL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
    &kp ESC       &kp Q       &kp W        &kp E         &kp R      &kp T              &kp Y         &kp U        &kp I       &kp O          &kp P           &kp BACKSPACE
    &kp TAB  &hm LGUI A  &hm LALT S  &hm LCTRL D  &hm LSHIFT F      &kp G              &kp H  &hm RSHIFT J  &hm RCTRL K  &hm RALT L  &hm RGUI SEMI  &hm APOS DOUBLE_QUOTES
 &kp LSHIFT       &kp Z       &kp X        &kp C         &kp V      &kp B              &kp N         &kp M    &kp COMMA     &kp DOT       &kp FSLH              &kp RSHIFT
                                           &mo 2         &mo 1  &kp ENTER          &kp SPACE         &mo 2        &mo 1
            >;
        };

        raise {
            bindings = <
 &kp TILDE    &kp N1        &kp N2         &kp N3          &kp N4           &kp N5          &kp N6     &kp N7     &kp N8         &kp N9          &kp N0  &kp BACKSPACE
    &trans  &kp LGUI  &kp LEFT_ALT      &kp LCTRL  &kp LEFT_SHIFT   &kp LEFT_SHIFT          &trans  &kp RSHFT  &kp RCTRL  &kp RIGHT_ALT   &kp RIGHT_GUI       &kp PLUS
    &trans    &trans  &screen_left  &screen_right  &kp LEFT_BRACE  &kp RIGHT_BRACE          &trans     &trans     &trans         &trans  &kp UNDERSCORE     &kp RSHIFT
                                            &mo 3          &trans           &trans          &trans      &mo 3     &trans
            >;
        };

        lower {
            bindings = <
   &kp K_MUTE  &trans  &trans  &trans  &trans  &trans             &trans        &trans    &kp UP         &trans       &kp MINUS     &trans
 &kp K_VOL_UP  &trans  &trans  &trans  &trans  &trans          &kp PG_UP      &kp LEFT  &kp DOWN      &kp RIGHT  &kp UNDERSCORE   &kp PLUS
 &kp K_VOL_DN  &trans  &trans  &trans  &trans  &trans          &kp PG_DN  &screen_left    &trans  &screen_right        &kp PIPE  &kp TILDE
                               &trans   &mo 3  &trans             &trans        &trans     &mo 3
            >;
        };

        BT {
            bindings = <
     &trans        &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
 &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &trans  &trans  &trans  &trans  &trans  &trans
 &bt BT_PRV    &bt BT_NXT        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                               &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
